package main

import "fmt"

/*
Реализовать быструю сортировку массива (quicksort) встроенными методами языка.
*/

/*
1) Выбирается опорный элемент — им может быть любой элемент массива (В моем случае - последний).
2) Все остальные элементы массива сравниваются с опорным и те, которые меньше него, ставятся слева от него, а которые больше или равны — справа.
3)Для двух получившихся блоков массива (меньше опорного, и больше либо равны опорному) производится точно такая же операция — выделяется опорный элемент и всё идёт точно так же, пока в блоке не останется один элемент.
  Так снова и снова - это значит, что будем юзать рекурсию. Рекурсия — это когда функция вызывает саму себя, и при этом ей нужно держать в памяти все предыдущие этапы.
*/

func main() {
	// Пусть исходный массив будет:
	arr := []int{9, 7, 5, 100, 12, 2, 14, 3, 10, 6, 14, 2}
	fmt.Println("Перед сортировкой:", arr)

	// Вызов функции быстрой сортировки
	handmadeQuickSort(arr, 0, len(arr)-1)

	fmt.Println("После сортировки:", arr)
}

func handmadeQuickSort(arr []int, low, high int) {
	// Проверка, что в исходном массиве больше чем 1 элемент
	if low < high {
		// Разделение подмассива и получение индекса опорного элемента (далее - пивот)
		pivotIndex := partition(arr, low, high)

		// Рекурсивный вызов handmadeQuickSort для левой половины массива
		handmadeQuickSort(arr, low, pivotIndex-1)
		// Рекурсивный вызов handmadeQuickSort для правой половины массива
		handmadeQuickSort(arr, pivotIndex+1, high)
	}
}

func partition(arr []int, low, high int) int {
	// Выбор пивота (берем последний элемент массива)
	pivot := arr[high]
	// Инициализация индекса меньшего элемента
	i := low - 1

	// Проход по подмассиву от low до high-1
	for j := low; j < high; j++ {
		// Если текущий элемент меньше пивота
		if arr[j] < pivot {
			// Увеличение индекса меньшего элемента
			i++
			// Свап значений между arr[i] и arr[j]
			arr[i], arr[j] = arr[j], arr[i]
		}
	}

	// Помещение пивота в правильную позицию
	arr[i+1], arr[high] = arr[high], arr[i+1]
	// Возврат индекса пивота
	return i + 1
}
